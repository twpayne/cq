#!/usr/bin/env python
# FIXME pager

import ConfigParser
import linecache
import optparse
import os
import re
import sqlite3
import sys
import tempfile


def doreindexpath(root_path, cursor):
    for dirpath, dirnames, filenames in os.walk(root_path):
        for filename in filenames:
            if not filename.endswith('.js'):
                continue
            path = os.path.join(dirpath, filename)
            firstline = None
            closingline = None
            with open(path) as f:
                for i, line in enumerate(f):
                    if line.startswith('/**'):
                        firstline = i
                        closingline = None
                        continue
                    if closingline:
                        if line == '\n':
                            cursor.execute('INSERT INTO `index` (key, path, firstline, lastline) VALUES (?, ?, ?, ?)', (key, path, firstline, i - 1))
                            firstline = None
                            closingline = None
                            continue
                    if firstline:
                        m = re.match('^(\S+)\s+=', line)
                        if m:
                            key = m.group(1)
                            continue
                        if line == '};\n':
                            closingline = i
                            continue
            if firstline:
                cursor.execute('INSERT INTO `index` (key, path, firstline, lastline) VALUES (?, ?, ?, ?)', (key, path, firstline, i))
        if '.git' in dirnames:
            dirnames.remove('.git')
        if '.svn' in dirnames:
            dirnames.remove('.svn')


def doreindex(root_paths, index_database):
    with tempfile.NamedTemporaryFile() as ntf:
        connection = sqlite3.connect(ntf.name)
        cursor = connection.cursor()
        cursor.execute('''CREATE TABLE `index` (key STRING NOT NULL, path STRING NOT NULL, firstline INTEGER NOT NULL, lastline INTEGER NOT NULL)''')
        connection.commit()
        for path in root_paths:
            doreindexpath(path, cursor)
            connection.commit()
        os.rename(ntf.name, index_database)
        ntf.delete = False


def main(argv):

    cqrc_filename = os.path.join(os.environ['HOME'], '.cqrc')

    option_parser = optparse.OptionParser()
    option_parser.add_option('--index-database', default=os.path.join(os.environ['HOME'], '.cqdb'), metavar='PATH')
    option_parser.add_option('--reindex', action='store_true')
    option_parser.add_option('--code', '-c', action='store_const', const='code', dest='mode')
    option_parser.add_option('--list', '-l', action='store_const', const='list', dest='mode')
    options, args = option_parser.parse_args(sys.argv[1:])

    config_parser = ConfigParser.ConfigParser(os.environ)
    config_parser.read(cqrc_filename)
    root_paths = set()
    for section in config_parser.sections():
        try:
            root_paths.add(config_parser.get(section, 'path'))
        except ConfigParser.NoOptionError:
            pass

    reindex = options.reindex
    connection = None
    cursor = None

    if not os.path.exists(options.index_database):
        reindex = True
    elif os.stat(cqrc_filename).st_mtime > os.stat(options.index_database).st_mtime:
        reindex = True
    elif os.stat(argv[0]).st_mtime > os.stat(options.index_database).st_mtime:
        reindex = True
    else:
        connection = sqlite3.connect(options.index_database)
        cursor = connection.cursor()
        matched_paths = set()
        for arg in args:
            cursor.execute('SELECT path FROM `index` WHERE key LIKE ?', (arg,))
            for row in cursor:
                matched_paths.add(row[0])
        index_database_mtime = os.stat(options.index_database).st_mtime
        for matched_path in matched_paths:
            if os.stat(matched_path).st_mtime > index_database_mtime:
                reindex = True

    if reindex:
        doreindex(root_paths, options.index_database)
        connection = None
        del cursor

    if connection is None:
        connection = sqlite3.connect(options.index_database)
        cursor = connection.cursor()

    for arg in args:
        cursor.execute('SELECT key, path, firstline, lastline FROM `index` WHERE key LIKE ? ORDER BY key', (arg,))
        rows = cursor.fetchall()
        if len(rows) == 0:
            print '%s: no matches' % (arg,)
        else:
            mode = options.mode
            if mode is None:
                mode = 'code' if len(rows) == 1 else 'list'
            if mode == 'code':
                if len(args) != 1:
                    print '%s:' % (arg,)
                for i, row in enumerate(rows):
                    if i:
                        print
                    for j in xrange(row[2], row[3] + 1):
                        print linecache.getline(row[1], j + 1).rstrip()
            else:
                if len(args) != 1:
                    print '%s:' % (arg,)
                for row in rows:
                    print row[0]


if __name__ == '__main__':
    sys.exit(main(sys.argv))
