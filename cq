#!/usr/bin/env python

import ConfigParser
from cStringIO import StringIO
from collections import defaultdict
import linecache
import optparse
import os
import pydoc
import re
import sqlite3
import sys
import tempfile
import shutil


def doreindexpath(root_path, cursor):
    for dirpath, dirnames, filenames in os.walk(root_path):
        for filename in filenames:
            if not filename.endswith('.js'):
                continue
            path = os.path.join(dirpath, filename)
            state = 0
            firstline = None
            key = None
            with open(path) as f:
                for i, line in enumerate(f):
                    line = re.sub(r'\s*//.*$', '', line)
                    m = re.match(r'goog.inherits\((\S+),\s*(\S+)\);', line)
                    if m:
                        cursor.execute('INSERT INTO inheritance (child, parent) VALUES (?, ?)', (m.group(1), m.group(2)))
                    if state == 0:
                        if line == '/**\n':
                            firstline = i
                            state = 1
                            continue
                    elif state == 1:
                        if line == '/**\n':
                            firstline = i
                            continue
                        m = re.match('^(?:var\s+)?(\S+)\s+=.*;$', line)
                        if m:
                            key = m.group(1)
                            state = 4
                            continue
                        m = re.match('^(\S+)\s+=\s+\[$', line)
                        if m:
                            key = m.group(1)
                            state = 3
                            continue
                        m = re.match('^(\S+)\s+=', line)
                        if m:
                            key = m.group(1)
                            state = 2
                            continue
                    elif state == 2:
                        if line == '};\n':
                            state = 4
                            continue
                    elif state == 3:
                        if line == '];\n':
                            state = 4
                            continue
                    elif state == 4:
                        if line == '\n':
                            cursor.execute('INSERT INTO `index` (key, path, firstline, lastline) VALUES (?, ?, ?, ?)', (key, path, firstline, i - 1))
                            state = 0
                            continue
            if state == 4:
                cursor.execute('INSERT INTO `index` (key, path, firstline, lastline) VALUES (?, ?, ?, ?)', (key, path, firstline, i))
        if '.git' in dirnames:
            dirnames.remove('.git')
        if '.svn' in dirnames:
            dirnames.remove('.svn')


def doreindex(root_paths, index_database):
    with tempfile.NamedTemporaryFile() as ntf:
        connection = sqlite3.connect(ntf.name)
        cursor = connection.cursor()
        cursor.execute('''CREATE TABLE `index` (key STRING NOT NULL, path STRING NOT NULL, firstline INTEGER NOT NULL, lastline INTEGER NOT NULL)''')
        cursor.execute('''CREATE TABLE inheritance (child STRING NOT NULL, parent STRING NOT NULL)''')
        connection.commit()
        for path in root_paths:
            doreindexpath(path, cursor)
            connection.commit()
        shutil.move(ntf.name, index_database)
        ntf.delete = False


def printhierarchy(output, root, children, prefix=''):
    output.write(prefix[:-1] + '+-' + root + '\n')
    prefix += ' '
    for i, child in enumerate(sorted(children[root])):
        output.write(prefix + '|\n')
        if children[child]:
            if i == len(children[root]) - 1:
                printhierarchy(output, child, children, prefix + ' ')
            else:
                printhierarchy(output, child, children, prefix + '|')
        else:
            output.write(prefix + '+-' + child + '\n')


def main(argv):

    cqrc_filename = os.path.join(os.environ['HOME'], '.cqrc')

    option_parser = optparse.OptionParser(add_help_option=False)
    option_parser.add_option('--help', action='store_true')
    option_parser.add_option('--code', '-c', action='store_const', const='code', dest='mode', help='show function')
    option_parser.add_option('--file', '-f', action='store_const', const='file', dest='mode', help='show entire file')
    option_parser.add_option('--index-database', default=os.path.join(os.environ['HOME'], '.cqdb'), help='set database', metavar='PATH')
    option_parser.add_option('--inheritance', '-i', action='store_const', const='inheritance', dest='mode', help='show inheritance hierarchy')
    option_parser.add_option('--line-number', '-n', action='store_true', help='show line numbers')
    option_parser.add_option('--list', '-l', action='store_const', const='list', dest='mode', help='show list of matches')
    option_parser.add_option('--no-filename', '-h', action='store_false', dest='filename', help='don\'t show filename')
    option_parser.add_option('--reindex', action='store_true', help='reindex')
    option_parser.add_option('--substring', '-s', action='store_true', help='search for substring')
    option_parser.add_option('--with-filename', '-H', action='store_true', dest='filename', help='show filename')
    options, args = option_parser.parse_args(sys.argv[1:])
    if options.help:
        option_parser.print_help()
        return
    if options.substring:
        args = ['%' + arg + '%' for arg in args]

    config_parser = ConfigParser.ConfigParser(os.environ)
    config_parser.read(cqrc_filename)
    root_paths = set()
    for section in config_parser.sections():
        try:
            root_paths.add(config_parser.get(section, 'path'))
        except ConfigParser.NoOptionError:
            pass

    reindex = options.reindex
    connection = None
    cursor = None

    if not os.path.exists(options.index_database):
        reindex = True
    elif os.stat(cqrc_filename).st_mtime > os.stat(options.index_database).st_mtime:
        reindex = True
    elif os.stat(argv[0]).st_mtime > os.stat(options.index_database).st_mtime:
        reindex = True
    else:
        connection = sqlite3.connect(options.index_database)
        cursor = connection.cursor()
        matched_paths = set()
        for arg in args:
            cursor.execute('SELECT path FROM `index` WHERE key LIKE ?', (arg,))
            for row in cursor:
                matched_paths.add(row[0])
        index_database_mtime = os.stat(options.index_database).st_mtime
        for matched_path in matched_paths:
            try:
                if os.stat(matched_path).st_mtime > index_database_mtime:
                    reindex = True
                    break
            except OSError:
                reindex = True
                break

    if reindex:
        doreindex(root_paths, options.index_database)
        connection = None
        del cursor

    if connection is None:
        connection = sqlite3.connect(options.index_database)
        cursor = connection.cursor()

    page = os.isatty(sys.stdout.fileno())
    if page:
        output = StringIO()
    else:
        output = sys.stdout

    if options.mode in (None, 'code', 'list'):
        for arg in args:
            cursor.execute('SELECT key, path, firstline, lastline FROM `index` WHERE key LIKE ? ORDER BY path, firstline', (arg,))
            rows = cursor.fetchall()
            if len(rows) == 0:
                output.write('%s: no matches\n' % (arg,))
            else:
                mode = options.mode
                if mode is None:
                    mode = 'code' if len(rows) == 1 else 'list'
                if mode == 'code':
                    if len(args) != 1:
                        output.write('%s:\n' % (arg,))
                    for i, row in enumerate(rows):
                        if i:
                            output.write('\n\n')
                        for j in xrange(row[2], row[3] + 1):
                            fields = []
                            if options.filename:
                                fields.append(row[1])
                            if options.line_number:
                                fields.append(str(j + 1))
                            fields.append(linecache.getline(row[1], j + 1).rstrip())
                            output.write(':'.join(fields) + '\n')
                elif mode == 'list':
                    if len(args) != 1:
                        output.write('%s:\n' % (arg,))
                    for row in rows:
                        fields = []
                        if options.filename:
                            fields.append(row[1])
                        if options.line_number:
                            fields.append(str(row[2]))
                        fields.append(row[0])
                        output.write(':'.join(fields) + '\n')
    elif options.mode == 'file':
        paths = set()
        for arg in args:
            cursor.execute('SELECT path FROM `index` WHERE key LIKE ?', (arg,))
            for row in cursor:
                paths.add(row[0])
        if len(paths) == 0:
            output.write('no matches\n')
        else:
            for path in sorted(paths):
                for i, line in enumerate(open(path)):
                    fields = []
                    if options.filename:
                        fields.append(path)
                    if options.line_number:
                        fields.append(str(i + 1))
                    fields.append(line.rstrip())
                    output.write(':'.join(fields) + '\n')
    elif options.mode == 'inheritance':
        tree = defaultdict(set)
        for arg in args:
            cursor.execute('SELECT child, parent FROM inheritance WHERE parent LIKE ?', (arg,))
            for row in cursor:
                tree[row[1]].add(row[0])
        roots = set(tree.iterkeys())
        for parent, children in tree.iteritems():
            roots = roots - children
        for i, root in enumerate(sorted(roots)):
            if i:
                output.write('\n')
            printhierarchy(output, root, tree)

    if page:
        pydoc.pager(output.getvalue())


if __name__ == '__main__':
    sys.exit(main(sys.argv))
